{-
   Argo

   No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

   OpenAPI spec version: 2.0
   Argo API version: v2.1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Argo.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Argo.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import Argo.Model
import Argo.Core


-- * Arguments

-- | 'argumentsArtifacts' Lens
argumentsArtifactsL :: Lens_' Arguments (Maybe [Artifact])
argumentsArtifactsL f Arguments{..} = (\argumentsArtifacts -> Arguments { argumentsArtifacts, ..} ) <$> f argumentsArtifacts
{-# INLINE argumentsArtifactsL #-}

-- | 'argumentsParameters' Lens
argumentsParametersL :: Lens_' Arguments (Maybe [Parameter])
argumentsParametersL f Arguments{..} = (\argumentsParameters -> Arguments { argumentsParameters, ..} ) <$> f argumentsParameters
{-# INLINE argumentsParametersL #-}



-- * Artifact

-- | 'artifactArtifactory' Lens
artifactArtifactoryL :: Lens_' Artifact (Maybe ArtifactoryArtifact)
artifactArtifactoryL f Artifact{..} = (\artifactArtifactory -> Artifact { artifactArtifactory, ..} ) <$> f artifactArtifactory
{-# INLINE artifactArtifactoryL #-}

-- | 'artifactFrom' Lens
artifactFromL :: Lens_' Artifact (Maybe Text)
artifactFromL f Artifact{..} = (\artifactFrom -> Artifact { artifactFrom, ..} ) <$> f artifactFrom
{-# INLINE artifactFromL #-}

-- | 'artifactGit' Lens
artifactGitL :: Lens_' Artifact (Maybe GitArtifact)
artifactGitL f Artifact{..} = (\artifactGit -> Artifact { artifactGit, ..} ) <$> f artifactGit
{-# INLINE artifactGitL #-}

-- | 'artifactGlobalName' Lens
artifactGlobalNameL :: Lens_' Artifact (Maybe Text)
artifactGlobalNameL f Artifact{..} = (\artifactGlobalName -> Artifact { artifactGlobalName, ..} ) <$> f artifactGlobalName
{-# INLINE artifactGlobalNameL #-}

-- | 'artifactHttp' Lens
artifactHttpL :: Lens_' Artifact (Maybe HTTPArtifact)
artifactHttpL f Artifact{..} = (\artifactHttp -> Artifact { artifactHttp, ..} ) <$> f artifactHttp
{-# INLINE artifactHttpL #-}

-- | 'artifactMode' Lens
artifactModeL :: Lens_' Artifact (Maybe Int)
artifactModeL f Artifact{..} = (\artifactMode -> Artifact { artifactMode, ..} ) <$> f artifactMode
{-# INLINE artifactModeL #-}

-- | 'artifactName' Lens
artifactNameL :: Lens_' Artifact (Text)
artifactNameL f Artifact{..} = (\artifactName -> Artifact { artifactName, ..} ) <$> f artifactName
{-# INLINE artifactNameL #-}

-- | 'artifactPath' Lens
artifactPathL :: Lens_' Artifact (Maybe Text)
artifactPathL f Artifact{..} = (\artifactPath -> Artifact { artifactPath, ..} ) <$> f artifactPath
{-# INLINE artifactPathL #-}

-- | 'artifactRaw' Lens
artifactRawL :: Lens_' Artifact (Maybe RawArtifact)
artifactRawL f Artifact{..} = (\artifactRaw -> Artifact { artifactRaw, ..} ) <$> f artifactRaw
{-# INLINE artifactRawL #-}

-- | 'artifactS3' Lens
artifactS3L :: Lens_' Artifact (Maybe S3Artifact)
artifactS3L f Artifact{..} = (\artifactS3 -> Artifact { artifactS3, ..} ) <$> f artifactS3
{-# INLINE artifactS3L #-}



-- * ArtifactLocation

-- | 'artifactLocationArtifactory' Lens
artifactLocationArtifactoryL :: Lens_' ArtifactLocation (Maybe ArtifactoryArtifact)
artifactLocationArtifactoryL f ArtifactLocation{..} = (\artifactLocationArtifactory -> ArtifactLocation { artifactLocationArtifactory, ..} ) <$> f artifactLocationArtifactory
{-# INLINE artifactLocationArtifactoryL #-}

-- | 'artifactLocationGit' Lens
artifactLocationGitL :: Lens_' ArtifactLocation (Maybe GitArtifact)
artifactLocationGitL f ArtifactLocation{..} = (\artifactLocationGit -> ArtifactLocation { artifactLocationGit, ..} ) <$> f artifactLocationGit
{-# INLINE artifactLocationGitL #-}

-- | 'artifactLocationHttp' Lens
artifactLocationHttpL :: Lens_' ArtifactLocation (Maybe HTTPArtifact)
artifactLocationHttpL f ArtifactLocation{..} = (\artifactLocationHttp -> ArtifactLocation { artifactLocationHttp, ..} ) <$> f artifactLocationHttp
{-# INLINE artifactLocationHttpL #-}

-- | 'artifactLocationRaw' Lens
artifactLocationRawL :: Lens_' ArtifactLocation (Maybe RawArtifact)
artifactLocationRawL f ArtifactLocation{..} = (\artifactLocationRaw -> ArtifactLocation { artifactLocationRaw, ..} ) <$> f artifactLocationRaw
{-# INLINE artifactLocationRawL #-}

-- | 'artifactLocationS3' Lens
artifactLocationS3L :: Lens_' ArtifactLocation (Maybe S3Artifact)
artifactLocationS3L f ArtifactLocation{..} = (\artifactLocationS3 -> ArtifactLocation { artifactLocationS3, ..} ) <$> f artifactLocationS3
{-# INLINE artifactLocationS3L #-}



-- * ArtifactoryArtifact

-- | 'artifactoryArtifactPasswordSecret' Lens
artifactoryArtifactPasswordSecretL :: Lens_' ArtifactoryArtifact (Maybe V1SecretKeySelector)
artifactoryArtifactPasswordSecretL f ArtifactoryArtifact{..} = (\artifactoryArtifactPasswordSecret -> ArtifactoryArtifact { artifactoryArtifactPasswordSecret, ..} ) <$> f artifactoryArtifactPasswordSecret
{-# INLINE artifactoryArtifactPasswordSecretL #-}

-- | 'artifactoryArtifactUrl' Lens
artifactoryArtifactUrlL :: Lens_' ArtifactoryArtifact (Text)
artifactoryArtifactUrlL f ArtifactoryArtifact{..} = (\artifactoryArtifactUrl -> ArtifactoryArtifact { artifactoryArtifactUrl, ..} ) <$> f artifactoryArtifactUrl
{-# INLINE artifactoryArtifactUrlL #-}

-- | 'artifactoryArtifactUsernameSecret' Lens
artifactoryArtifactUsernameSecretL :: Lens_' ArtifactoryArtifact (Maybe V1SecretKeySelector)
artifactoryArtifactUsernameSecretL f ArtifactoryArtifact{..} = (\artifactoryArtifactUsernameSecret -> ArtifactoryArtifact { artifactoryArtifactUsernameSecret, ..} ) <$> f artifactoryArtifactUsernameSecret
{-# INLINE artifactoryArtifactUsernameSecretL #-}



-- * ArtifactoryAuth

-- | 'artifactoryAuthPasswordSecret' Lens
artifactoryAuthPasswordSecretL :: Lens_' ArtifactoryAuth (Maybe V1SecretKeySelector)
artifactoryAuthPasswordSecretL f ArtifactoryAuth{..} = (\artifactoryAuthPasswordSecret -> ArtifactoryAuth { artifactoryAuthPasswordSecret, ..} ) <$> f artifactoryAuthPasswordSecret
{-# INLINE artifactoryAuthPasswordSecretL #-}

-- | 'artifactoryAuthUsernameSecret' Lens
artifactoryAuthUsernameSecretL :: Lens_' ArtifactoryAuth (Maybe V1SecretKeySelector)
artifactoryAuthUsernameSecretL f ArtifactoryAuth{..} = (\artifactoryAuthUsernameSecret -> ArtifactoryAuth { artifactoryAuthUsernameSecret, ..} ) <$> f artifactoryAuthUsernameSecret
{-# INLINE artifactoryAuthUsernameSecretL #-}



-- * DAGTask

-- | 'dAGTaskArguments' Lens
dAGTaskArgumentsL :: Lens_' DAGTask (Maybe Arguments)
dAGTaskArgumentsL f DAGTask{..} = (\dAGTaskArguments -> DAGTask { dAGTaskArguments, ..} ) <$> f dAGTaskArguments
{-# INLINE dAGTaskArgumentsL #-}

-- | 'dAGTaskDependencies' Lens
dAGTaskDependenciesL :: Lens_' DAGTask (Maybe [Text])
dAGTaskDependenciesL f DAGTask{..} = (\dAGTaskDependencies -> DAGTask { dAGTaskDependencies, ..} ) <$> f dAGTaskDependencies
{-# INLINE dAGTaskDependenciesL #-}

-- | 'dAGTaskName' Lens
dAGTaskNameL :: Lens_' DAGTask (Text)
dAGTaskNameL f DAGTask{..} = (\dAGTaskName -> DAGTask { dAGTaskName, ..} ) <$> f dAGTaskName
{-# INLINE dAGTaskNameL #-}

-- | 'dAGTaskTemplate' Lens
dAGTaskTemplateL :: Lens_' DAGTask (Text)
dAGTaskTemplateL f DAGTask{..} = (\dAGTaskTemplate -> DAGTask { dAGTaskTemplate, ..} ) <$> f dAGTaskTemplate
{-# INLINE dAGTaskTemplateL #-}



-- * DAGTemplate

-- | 'dAGTemplateTarget' Lens
dAGTemplateTargetL :: Lens_' DAGTemplate (Maybe Text)
dAGTemplateTargetL f DAGTemplate{..} = (\dAGTemplateTarget -> DAGTemplate { dAGTemplateTarget, ..} ) <$> f dAGTemplateTarget
{-# INLINE dAGTemplateTargetL #-}

-- | 'dAGTemplateTasks' Lens
dAGTemplateTasksL :: Lens_' DAGTemplate ([DAGTask])
dAGTemplateTasksL f DAGTemplate{..} = (\dAGTemplateTasks -> DAGTemplate { dAGTemplateTasks, ..} ) <$> f dAGTemplateTasks
{-# INLINE dAGTemplateTasksL #-}



-- * GitArtifact

-- | 'gitArtifactPasswordSecret' Lens
gitArtifactPasswordSecretL :: Lens_' GitArtifact (Maybe V1SecretKeySelector)
gitArtifactPasswordSecretL f GitArtifact{..} = (\gitArtifactPasswordSecret -> GitArtifact { gitArtifactPasswordSecret, ..} ) <$> f gitArtifactPasswordSecret
{-# INLINE gitArtifactPasswordSecretL #-}

-- | 'gitArtifactRepo' Lens
gitArtifactRepoL :: Lens_' GitArtifact (Text)
gitArtifactRepoL f GitArtifact{..} = (\gitArtifactRepo -> GitArtifact { gitArtifactRepo, ..} ) <$> f gitArtifactRepo
{-# INLINE gitArtifactRepoL #-}

-- | 'gitArtifactRevision' Lens
gitArtifactRevisionL :: Lens_' GitArtifact (Maybe Text)
gitArtifactRevisionL f GitArtifact{..} = (\gitArtifactRevision -> GitArtifact { gitArtifactRevision, ..} ) <$> f gitArtifactRevision
{-# INLINE gitArtifactRevisionL #-}

-- | 'gitArtifactUsernameSecret' Lens
gitArtifactUsernameSecretL :: Lens_' GitArtifact (Maybe V1SecretKeySelector)
gitArtifactUsernameSecretL f GitArtifact{..} = (\gitArtifactUsernameSecret -> GitArtifact { gitArtifactUsernameSecret, ..} ) <$> f gitArtifactUsernameSecret
{-# INLINE gitArtifactUsernameSecretL #-}



-- * HTTPArtifact

-- | 'hTTPArtifactUrl' Lens
hTTPArtifactUrlL :: Lens_' HTTPArtifact (Text)
hTTPArtifactUrlL f HTTPArtifact{..} = (\hTTPArtifactUrl -> HTTPArtifact { hTTPArtifactUrl, ..} ) <$> f hTTPArtifactUrl
{-# INLINE hTTPArtifactUrlL #-}



-- * Inputs

-- | 'inputsArtifacts' Lens
inputsArtifactsL :: Lens_' Inputs (Maybe [Artifact])
inputsArtifactsL f Inputs{..} = (\inputsArtifacts -> Inputs { inputsArtifacts, ..} ) <$> f inputsArtifacts
{-# INLINE inputsArtifactsL #-}

-- | 'inputsParameters' Lens
inputsParametersL :: Lens_' Inputs (Maybe [Parameter])
inputsParametersL f Inputs{..} = (\inputsParameters -> Inputs { inputsParameters, ..} ) <$> f inputsParameters
{-# INLINE inputsParametersL #-}



-- * Item



-- * Metadata

-- | 'metadataAnnotations' Lens
metadataAnnotationsL :: Lens_' Metadata (Maybe (Map.Map String Text))
metadataAnnotationsL f Metadata{..} = (\metadataAnnotations -> Metadata { metadataAnnotations, ..} ) <$> f metadataAnnotations
{-# INLINE metadataAnnotationsL #-}

-- | 'metadataLabels' Lens
metadataLabelsL :: Lens_' Metadata (Maybe (Map.Map String Text))
metadataLabelsL f Metadata{..} = (\metadataLabels -> Metadata { metadataLabels, ..} ) <$> f metadataLabels
{-# INLINE metadataLabelsL #-}



-- * Outputs

-- | 'outputsArtifacts' Lens
outputsArtifactsL :: Lens_' Outputs (Maybe [Artifact])
outputsArtifactsL f Outputs{..} = (\outputsArtifacts -> Outputs { outputsArtifacts, ..} ) <$> f outputsArtifacts
{-# INLINE outputsArtifactsL #-}

-- | 'outputsParameters' Lens
outputsParametersL :: Lens_' Outputs (Maybe [Parameter])
outputsParametersL f Outputs{..} = (\outputsParameters -> Outputs { outputsParameters, ..} ) <$> f outputsParameters
{-# INLINE outputsParametersL #-}

-- | 'outputsResult' Lens
outputsResultL :: Lens_' Outputs (Maybe Text)
outputsResultL f Outputs{..} = (\outputsResult -> Outputs { outputsResult, ..} ) <$> f outputsResult
{-# INLINE outputsResultL #-}



-- * Parameter

-- | 'parameterDefault' Lens
parameterDefaultL :: Lens_' Parameter (Maybe Text)
parameterDefaultL f Parameter{..} = (\parameterDefault -> Parameter { parameterDefault, ..} ) <$> f parameterDefault
{-# INLINE parameterDefaultL #-}

-- | 'parameterGlobalName' Lens
parameterGlobalNameL :: Lens_' Parameter (Maybe Text)
parameterGlobalNameL f Parameter{..} = (\parameterGlobalName -> Parameter { parameterGlobalName, ..} ) <$> f parameterGlobalName
{-# INLINE parameterGlobalNameL #-}

-- | 'parameterName' Lens
parameterNameL :: Lens_' Parameter (Text)
parameterNameL f Parameter{..} = (\parameterName -> Parameter { parameterName, ..} ) <$> f parameterName
{-# INLINE parameterNameL #-}

-- | 'parameterValue' Lens
parameterValueL :: Lens_' Parameter (Maybe Text)
parameterValueL f Parameter{..} = (\parameterValue -> Parameter { parameterValue, ..} ) <$> f parameterValue
{-# INLINE parameterValueL #-}

-- | 'parameterValueFrom' Lens
parameterValueFromL :: Lens_' Parameter (Maybe ValueFrom)
parameterValueFromL f Parameter{..} = (\parameterValueFrom -> Parameter { parameterValueFrom, ..} ) <$> f parameterValueFrom
{-# INLINE parameterValueFromL #-}



-- * RawArtifact

-- | 'rawArtifactData' Lens
rawArtifactDataL :: Lens_' RawArtifact (Text)
rawArtifactDataL f RawArtifact{..} = (\rawArtifactData -> RawArtifact { rawArtifactData, ..} ) <$> f rawArtifactData
{-# INLINE rawArtifactDataL #-}



-- * ResourceTemplate

-- | 'resourceTemplateAction' Lens
resourceTemplateActionL :: Lens_' ResourceTemplate (Text)
resourceTemplateActionL f ResourceTemplate{..} = (\resourceTemplateAction -> ResourceTemplate { resourceTemplateAction, ..} ) <$> f resourceTemplateAction
{-# INLINE resourceTemplateActionL #-}

-- | 'resourceTemplateFailureCondition' Lens
resourceTemplateFailureConditionL :: Lens_' ResourceTemplate (Maybe Text)
resourceTemplateFailureConditionL f ResourceTemplate{..} = (\resourceTemplateFailureCondition -> ResourceTemplate { resourceTemplateFailureCondition, ..} ) <$> f resourceTemplateFailureCondition
{-# INLINE resourceTemplateFailureConditionL #-}

-- | 'resourceTemplateManifest' Lens
resourceTemplateManifestL :: Lens_' ResourceTemplate (Text)
resourceTemplateManifestL f ResourceTemplate{..} = (\resourceTemplateManifest -> ResourceTemplate { resourceTemplateManifest, ..} ) <$> f resourceTemplateManifest
{-# INLINE resourceTemplateManifestL #-}

-- | 'resourceTemplateSuccessCondition' Lens
resourceTemplateSuccessConditionL :: Lens_' ResourceTemplate (Maybe Text)
resourceTemplateSuccessConditionL f ResourceTemplate{..} = (\resourceTemplateSuccessCondition -> ResourceTemplate { resourceTemplateSuccessCondition, ..} ) <$> f resourceTemplateSuccessCondition
{-# INLINE resourceTemplateSuccessConditionL #-}



-- * RetryStrategy

-- | 'retryStrategyLimit' Lens
retryStrategyLimitL :: Lens_' RetryStrategy (Maybe Int)
retryStrategyLimitL f RetryStrategy{..} = (\retryStrategyLimit -> RetryStrategy { retryStrategyLimit, ..} ) <$> f retryStrategyLimit
{-# INLINE retryStrategyLimitL #-}



-- * S3Artifact

-- | 's3ArtifactAccessKeySecret' Lens
s3ArtifactAccessKeySecretL :: Lens_' S3Artifact (V1SecretKeySelector)
s3ArtifactAccessKeySecretL f S3Artifact{..} = (\s3ArtifactAccessKeySecret -> S3Artifact { s3ArtifactAccessKeySecret, ..} ) <$> f s3ArtifactAccessKeySecret
{-# INLINE s3ArtifactAccessKeySecretL #-}

-- | 's3ArtifactBucket' Lens
s3ArtifactBucketL :: Lens_' S3Artifact (Text)
s3ArtifactBucketL f S3Artifact{..} = (\s3ArtifactBucket -> S3Artifact { s3ArtifactBucket, ..} ) <$> f s3ArtifactBucket
{-# INLINE s3ArtifactBucketL #-}

-- | 's3ArtifactEndpoint' Lens
s3ArtifactEndpointL :: Lens_' S3Artifact (Text)
s3ArtifactEndpointL f S3Artifact{..} = (\s3ArtifactEndpoint -> S3Artifact { s3ArtifactEndpoint, ..} ) <$> f s3ArtifactEndpoint
{-# INLINE s3ArtifactEndpointL #-}

-- | 's3ArtifactInsecure' Lens
s3ArtifactInsecureL :: Lens_' S3Artifact (Maybe Bool)
s3ArtifactInsecureL f S3Artifact{..} = (\s3ArtifactInsecure -> S3Artifact { s3ArtifactInsecure, ..} ) <$> f s3ArtifactInsecure
{-# INLINE s3ArtifactInsecureL #-}

-- | 's3ArtifactKey' Lens
s3ArtifactKeyL :: Lens_' S3Artifact (Text)
s3ArtifactKeyL f S3Artifact{..} = (\s3ArtifactKey -> S3Artifact { s3ArtifactKey, ..} ) <$> f s3ArtifactKey
{-# INLINE s3ArtifactKeyL #-}

-- | 's3ArtifactRegion' Lens
s3ArtifactRegionL :: Lens_' S3Artifact (Maybe Text)
s3ArtifactRegionL f S3Artifact{..} = (\s3ArtifactRegion -> S3Artifact { s3ArtifactRegion, ..} ) <$> f s3ArtifactRegion
{-# INLINE s3ArtifactRegionL #-}

-- | 's3ArtifactSecretKeySecret' Lens
s3ArtifactSecretKeySecretL :: Lens_' S3Artifact (V1SecretKeySelector)
s3ArtifactSecretKeySecretL f S3Artifact{..} = (\s3ArtifactSecretKeySecret -> S3Artifact { s3ArtifactSecretKeySecret, ..} ) <$> f s3ArtifactSecretKeySecret
{-# INLINE s3ArtifactSecretKeySecretL #-}



-- * S3Bucket

-- | 's3BucketAccessKeySecret' Lens
s3BucketAccessKeySecretL :: Lens_' S3Bucket (V1SecretKeySelector)
s3BucketAccessKeySecretL f S3Bucket{..} = (\s3BucketAccessKeySecret -> S3Bucket { s3BucketAccessKeySecret, ..} ) <$> f s3BucketAccessKeySecret
{-# INLINE s3BucketAccessKeySecretL #-}

-- | 's3BucketBucket' Lens
s3BucketBucketL :: Lens_' S3Bucket (Text)
s3BucketBucketL f S3Bucket{..} = (\s3BucketBucket -> S3Bucket { s3BucketBucket, ..} ) <$> f s3BucketBucket
{-# INLINE s3BucketBucketL #-}

-- | 's3BucketEndpoint' Lens
s3BucketEndpointL :: Lens_' S3Bucket (Text)
s3BucketEndpointL f S3Bucket{..} = (\s3BucketEndpoint -> S3Bucket { s3BucketEndpoint, ..} ) <$> f s3BucketEndpoint
{-# INLINE s3BucketEndpointL #-}

-- | 's3BucketInsecure' Lens
s3BucketInsecureL :: Lens_' S3Bucket (Maybe Bool)
s3BucketInsecureL f S3Bucket{..} = (\s3BucketInsecure -> S3Bucket { s3BucketInsecure, ..} ) <$> f s3BucketInsecure
{-# INLINE s3BucketInsecureL #-}

-- | 's3BucketRegion' Lens
s3BucketRegionL :: Lens_' S3Bucket (Maybe Text)
s3BucketRegionL f S3Bucket{..} = (\s3BucketRegion -> S3Bucket { s3BucketRegion, ..} ) <$> f s3BucketRegion
{-# INLINE s3BucketRegionL #-}

-- | 's3BucketSecretKeySecret' Lens
s3BucketSecretKeySecretL :: Lens_' S3Bucket (V1SecretKeySelector)
s3BucketSecretKeySecretL f S3Bucket{..} = (\s3BucketSecretKeySecret -> S3Bucket { s3BucketSecretKeySecret, ..} ) <$> f s3BucketSecretKeySecret
{-# INLINE s3BucketSecretKeySecretL #-}



-- * ScriptTemplate

-- | 'scriptTemplateArgs' Lens
scriptTemplateArgsL :: Lens_' ScriptTemplate (Maybe [Text])
scriptTemplateArgsL f ScriptTemplate{..} = (\scriptTemplateArgs -> ScriptTemplate { scriptTemplateArgs, ..} ) <$> f scriptTemplateArgs
{-# INLINE scriptTemplateArgsL #-}

-- | 'scriptTemplateCommand' Lens
scriptTemplateCommandL :: Lens_' ScriptTemplate (Maybe [Text])
scriptTemplateCommandL f ScriptTemplate{..} = (\scriptTemplateCommand -> ScriptTemplate { scriptTemplateCommand, ..} ) <$> f scriptTemplateCommand
{-# INLINE scriptTemplateCommandL #-}

-- | 'scriptTemplateEnv' Lens
scriptTemplateEnvL :: Lens_' ScriptTemplate (Maybe [V1EnvVar])
scriptTemplateEnvL f ScriptTemplate{..} = (\scriptTemplateEnv -> ScriptTemplate { scriptTemplateEnv, ..} ) <$> f scriptTemplateEnv
{-# INLINE scriptTemplateEnvL #-}

-- | 'scriptTemplateEnvFrom' Lens
scriptTemplateEnvFromL :: Lens_' ScriptTemplate (Maybe [V1EnvFromSource])
scriptTemplateEnvFromL f ScriptTemplate{..} = (\scriptTemplateEnvFrom -> ScriptTemplate { scriptTemplateEnvFrom, ..} ) <$> f scriptTemplateEnvFrom
{-# INLINE scriptTemplateEnvFromL #-}

-- | 'scriptTemplateImage' Lens
scriptTemplateImageL :: Lens_' ScriptTemplate (Maybe Text)
scriptTemplateImageL f ScriptTemplate{..} = (\scriptTemplateImage -> ScriptTemplate { scriptTemplateImage, ..} ) <$> f scriptTemplateImage
{-# INLINE scriptTemplateImageL #-}

-- | 'scriptTemplateImagePullPolicy' Lens
scriptTemplateImagePullPolicyL :: Lens_' ScriptTemplate (Maybe Text)
scriptTemplateImagePullPolicyL f ScriptTemplate{..} = (\scriptTemplateImagePullPolicy -> ScriptTemplate { scriptTemplateImagePullPolicy, ..} ) <$> f scriptTemplateImagePullPolicy
{-# INLINE scriptTemplateImagePullPolicyL #-}

-- | 'scriptTemplateLifecycle' Lens
scriptTemplateLifecycleL :: Lens_' ScriptTemplate (Maybe V1Lifecycle)
scriptTemplateLifecycleL f ScriptTemplate{..} = (\scriptTemplateLifecycle -> ScriptTemplate { scriptTemplateLifecycle, ..} ) <$> f scriptTemplateLifecycle
{-# INLINE scriptTemplateLifecycleL #-}

-- | 'scriptTemplateLivenessProbe' Lens
scriptTemplateLivenessProbeL :: Lens_' ScriptTemplate (Maybe V1Probe)
scriptTemplateLivenessProbeL f ScriptTemplate{..} = (\scriptTemplateLivenessProbe -> ScriptTemplate { scriptTemplateLivenessProbe, ..} ) <$> f scriptTemplateLivenessProbe
{-# INLINE scriptTemplateLivenessProbeL #-}

-- | 'scriptTemplateName' Lens
scriptTemplateNameL :: Lens_' ScriptTemplate (Text)
scriptTemplateNameL f ScriptTemplate{..} = (\scriptTemplateName -> ScriptTemplate { scriptTemplateName, ..} ) <$> f scriptTemplateName
{-# INLINE scriptTemplateNameL #-}

-- | 'scriptTemplatePorts' Lens
scriptTemplatePortsL :: Lens_' ScriptTemplate (Maybe [V1ContainerPort])
scriptTemplatePortsL f ScriptTemplate{..} = (\scriptTemplatePorts -> ScriptTemplate { scriptTemplatePorts, ..} ) <$> f scriptTemplatePorts
{-# INLINE scriptTemplatePortsL #-}

-- | 'scriptTemplateReadinessProbe' Lens
scriptTemplateReadinessProbeL :: Lens_' ScriptTemplate (Maybe V1Probe)
scriptTemplateReadinessProbeL f ScriptTemplate{..} = (\scriptTemplateReadinessProbe -> ScriptTemplate { scriptTemplateReadinessProbe, ..} ) <$> f scriptTemplateReadinessProbe
{-# INLINE scriptTemplateReadinessProbeL #-}

-- | 'scriptTemplateResources' Lens
scriptTemplateResourcesL :: Lens_' ScriptTemplate (Maybe V1ResourceRequirements)
scriptTemplateResourcesL f ScriptTemplate{..} = (\scriptTemplateResources -> ScriptTemplate { scriptTemplateResources, ..} ) <$> f scriptTemplateResources
{-# INLINE scriptTemplateResourcesL #-}

-- | 'scriptTemplateSecurityContext' Lens
scriptTemplateSecurityContextL :: Lens_' ScriptTemplate (Maybe V1SecurityContext)
scriptTemplateSecurityContextL f ScriptTemplate{..} = (\scriptTemplateSecurityContext -> ScriptTemplate { scriptTemplateSecurityContext, ..} ) <$> f scriptTemplateSecurityContext
{-# INLINE scriptTemplateSecurityContextL #-}

-- | 'scriptTemplateSource' Lens
scriptTemplateSourceL :: Lens_' ScriptTemplate (Text)
scriptTemplateSourceL f ScriptTemplate{..} = (\scriptTemplateSource -> ScriptTemplate { scriptTemplateSource, ..} ) <$> f scriptTemplateSource
{-# INLINE scriptTemplateSourceL #-}

-- | 'scriptTemplateStdin' Lens
scriptTemplateStdinL :: Lens_' ScriptTemplate (Maybe Bool)
scriptTemplateStdinL f ScriptTemplate{..} = (\scriptTemplateStdin -> ScriptTemplate { scriptTemplateStdin, ..} ) <$> f scriptTemplateStdin
{-# INLINE scriptTemplateStdinL #-}

-- | 'scriptTemplateStdinOnce' Lens
scriptTemplateStdinOnceL :: Lens_' ScriptTemplate (Maybe Bool)
scriptTemplateStdinOnceL f ScriptTemplate{..} = (\scriptTemplateStdinOnce -> ScriptTemplate { scriptTemplateStdinOnce, ..} ) <$> f scriptTemplateStdinOnce
{-# INLINE scriptTemplateStdinOnceL #-}

-- | 'scriptTemplateTerminationMessagePath' Lens
scriptTemplateTerminationMessagePathL :: Lens_' ScriptTemplate (Maybe Text)
scriptTemplateTerminationMessagePathL f ScriptTemplate{..} = (\scriptTemplateTerminationMessagePath -> ScriptTemplate { scriptTemplateTerminationMessagePath, ..} ) <$> f scriptTemplateTerminationMessagePath
{-# INLINE scriptTemplateTerminationMessagePathL #-}

-- | 'scriptTemplateTerminationMessagePolicy' Lens
scriptTemplateTerminationMessagePolicyL :: Lens_' ScriptTemplate (Maybe Text)
scriptTemplateTerminationMessagePolicyL f ScriptTemplate{..} = (\scriptTemplateTerminationMessagePolicy -> ScriptTemplate { scriptTemplateTerminationMessagePolicy, ..} ) <$> f scriptTemplateTerminationMessagePolicy
{-# INLINE scriptTemplateTerminationMessagePolicyL #-}

-- | 'scriptTemplateTty' Lens
scriptTemplateTtyL :: Lens_' ScriptTemplate (Maybe Bool)
scriptTemplateTtyL f ScriptTemplate{..} = (\scriptTemplateTty -> ScriptTemplate { scriptTemplateTty, ..} ) <$> f scriptTemplateTty
{-# INLINE scriptTemplateTtyL #-}

-- | 'scriptTemplateVolumeDevices' Lens
scriptTemplateVolumeDevicesL :: Lens_' ScriptTemplate (Maybe [V1VolumeDevice])
scriptTemplateVolumeDevicesL f ScriptTemplate{..} = (\scriptTemplateVolumeDevices -> ScriptTemplate { scriptTemplateVolumeDevices, ..} ) <$> f scriptTemplateVolumeDevices
{-# INLINE scriptTemplateVolumeDevicesL #-}

-- | 'scriptTemplateVolumeMounts' Lens
scriptTemplateVolumeMountsL :: Lens_' ScriptTemplate (Maybe [V1VolumeMount])
scriptTemplateVolumeMountsL f ScriptTemplate{..} = (\scriptTemplateVolumeMounts -> ScriptTemplate { scriptTemplateVolumeMounts, ..} ) <$> f scriptTemplateVolumeMounts
{-# INLINE scriptTemplateVolumeMountsL #-}

-- | 'scriptTemplateWorkingDir' Lens
scriptTemplateWorkingDirL :: Lens_' ScriptTemplate (Maybe Text)
scriptTemplateWorkingDirL f ScriptTemplate{..} = (\scriptTemplateWorkingDir -> ScriptTemplate { scriptTemplateWorkingDir, ..} ) <$> f scriptTemplateWorkingDir
{-# INLINE scriptTemplateWorkingDirL #-}



-- * Sidecar

-- | 'sidecarArgs' Lens
sidecarArgsL :: Lens_' Sidecar (Maybe [Text])
sidecarArgsL f Sidecar{..} = (\sidecarArgs -> Sidecar { sidecarArgs, ..} ) <$> f sidecarArgs
{-# INLINE sidecarArgsL #-}

-- | 'sidecarCommand' Lens
sidecarCommandL :: Lens_' Sidecar (Maybe [Text])
sidecarCommandL f Sidecar{..} = (\sidecarCommand -> Sidecar { sidecarCommand, ..} ) <$> f sidecarCommand
{-# INLINE sidecarCommandL #-}

-- | 'sidecarEnv' Lens
sidecarEnvL :: Lens_' Sidecar (Maybe [V1EnvVar])
sidecarEnvL f Sidecar{..} = (\sidecarEnv -> Sidecar { sidecarEnv, ..} ) <$> f sidecarEnv
{-# INLINE sidecarEnvL #-}

-- | 'sidecarEnvFrom' Lens
sidecarEnvFromL :: Lens_' Sidecar (Maybe [V1EnvFromSource])
sidecarEnvFromL f Sidecar{..} = (\sidecarEnvFrom -> Sidecar { sidecarEnvFrom, ..} ) <$> f sidecarEnvFrom
{-# INLINE sidecarEnvFromL #-}

-- | 'sidecarImage' Lens
sidecarImageL :: Lens_' Sidecar (Maybe Text)
sidecarImageL f Sidecar{..} = (\sidecarImage -> Sidecar { sidecarImage, ..} ) <$> f sidecarImage
{-# INLINE sidecarImageL #-}

-- | 'sidecarImagePullPolicy' Lens
sidecarImagePullPolicyL :: Lens_' Sidecar (Maybe Text)
sidecarImagePullPolicyL f Sidecar{..} = (\sidecarImagePullPolicy -> Sidecar { sidecarImagePullPolicy, ..} ) <$> f sidecarImagePullPolicy
{-# INLINE sidecarImagePullPolicyL #-}

-- | 'sidecarLifecycle' Lens
sidecarLifecycleL :: Lens_' Sidecar (Maybe V1Lifecycle)
sidecarLifecycleL f Sidecar{..} = (\sidecarLifecycle -> Sidecar { sidecarLifecycle, ..} ) <$> f sidecarLifecycle
{-# INLINE sidecarLifecycleL #-}

-- | 'sidecarLivenessProbe' Lens
sidecarLivenessProbeL :: Lens_' Sidecar (Maybe V1Probe)
sidecarLivenessProbeL f Sidecar{..} = (\sidecarLivenessProbe -> Sidecar { sidecarLivenessProbe, ..} ) <$> f sidecarLivenessProbe
{-# INLINE sidecarLivenessProbeL #-}

-- | 'sidecarMirrorVolumeMounts' Lens
sidecarMirrorVolumeMountsL :: Lens_' Sidecar (Maybe Bool)
sidecarMirrorVolumeMountsL f Sidecar{..} = (\sidecarMirrorVolumeMounts -> Sidecar { sidecarMirrorVolumeMounts, ..} ) <$> f sidecarMirrorVolumeMounts
{-# INLINE sidecarMirrorVolumeMountsL #-}

-- | 'sidecarName' Lens
sidecarNameL :: Lens_' Sidecar (Text)
sidecarNameL f Sidecar{..} = (\sidecarName -> Sidecar { sidecarName, ..} ) <$> f sidecarName
{-# INLINE sidecarNameL #-}

-- | 'sidecarPorts' Lens
sidecarPortsL :: Lens_' Sidecar (Maybe [V1ContainerPort])
sidecarPortsL f Sidecar{..} = (\sidecarPorts -> Sidecar { sidecarPorts, ..} ) <$> f sidecarPorts
{-# INLINE sidecarPortsL #-}

-- | 'sidecarReadinessProbe' Lens
sidecarReadinessProbeL :: Lens_' Sidecar (Maybe V1Probe)
sidecarReadinessProbeL f Sidecar{..} = (\sidecarReadinessProbe -> Sidecar { sidecarReadinessProbe, ..} ) <$> f sidecarReadinessProbe
{-# INLINE sidecarReadinessProbeL #-}

-- | 'sidecarResources' Lens
sidecarResourcesL :: Lens_' Sidecar (Maybe V1ResourceRequirements)
sidecarResourcesL f Sidecar{..} = (\sidecarResources -> Sidecar { sidecarResources, ..} ) <$> f sidecarResources
{-# INLINE sidecarResourcesL #-}

-- | 'sidecarSecurityContext' Lens
sidecarSecurityContextL :: Lens_' Sidecar (Maybe V1SecurityContext)
sidecarSecurityContextL f Sidecar{..} = (\sidecarSecurityContext -> Sidecar { sidecarSecurityContext, ..} ) <$> f sidecarSecurityContext
{-# INLINE sidecarSecurityContextL #-}

-- | 'sidecarStdin' Lens
sidecarStdinL :: Lens_' Sidecar (Maybe Bool)
sidecarStdinL f Sidecar{..} = (\sidecarStdin -> Sidecar { sidecarStdin, ..} ) <$> f sidecarStdin
{-# INLINE sidecarStdinL #-}

-- | 'sidecarStdinOnce' Lens
sidecarStdinOnceL :: Lens_' Sidecar (Maybe Bool)
sidecarStdinOnceL f Sidecar{..} = (\sidecarStdinOnce -> Sidecar { sidecarStdinOnce, ..} ) <$> f sidecarStdinOnce
{-# INLINE sidecarStdinOnceL #-}

-- | 'sidecarTerminationMessagePath' Lens
sidecarTerminationMessagePathL :: Lens_' Sidecar (Maybe Text)
sidecarTerminationMessagePathL f Sidecar{..} = (\sidecarTerminationMessagePath -> Sidecar { sidecarTerminationMessagePath, ..} ) <$> f sidecarTerminationMessagePath
{-# INLINE sidecarTerminationMessagePathL #-}

-- | 'sidecarTerminationMessagePolicy' Lens
sidecarTerminationMessagePolicyL :: Lens_' Sidecar (Maybe Text)
sidecarTerminationMessagePolicyL f Sidecar{..} = (\sidecarTerminationMessagePolicy -> Sidecar { sidecarTerminationMessagePolicy, ..} ) <$> f sidecarTerminationMessagePolicy
{-# INLINE sidecarTerminationMessagePolicyL #-}

-- | 'sidecarTty' Lens
sidecarTtyL :: Lens_' Sidecar (Maybe Bool)
sidecarTtyL f Sidecar{..} = (\sidecarTty -> Sidecar { sidecarTty, ..} ) <$> f sidecarTty
{-# INLINE sidecarTtyL #-}

-- | 'sidecarVolumeDevices' Lens
sidecarVolumeDevicesL :: Lens_' Sidecar (Maybe [V1VolumeDevice])
sidecarVolumeDevicesL f Sidecar{..} = (\sidecarVolumeDevices -> Sidecar { sidecarVolumeDevices, ..} ) <$> f sidecarVolumeDevices
{-# INLINE sidecarVolumeDevicesL #-}

-- | 'sidecarVolumeMounts' Lens
sidecarVolumeMountsL :: Lens_' Sidecar (Maybe [V1VolumeMount])
sidecarVolumeMountsL f Sidecar{..} = (\sidecarVolumeMounts -> Sidecar { sidecarVolumeMounts, ..} ) <$> f sidecarVolumeMounts
{-# INLINE sidecarVolumeMountsL #-}

-- | 'sidecarWorkingDir' Lens
sidecarWorkingDirL :: Lens_' Sidecar (Maybe Text)
sidecarWorkingDirL f Sidecar{..} = (\sidecarWorkingDir -> Sidecar { sidecarWorkingDir, ..} ) <$> f sidecarWorkingDir
{-# INLINE sidecarWorkingDirL #-}



-- * SuspendTemplate



-- * Template

-- | 'templateActiveDeadlineSeconds' Lens
templateActiveDeadlineSecondsL :: Lens_' Template (Maybe Integer)
templateActiveDeadlineSecondsL f Template{..} = (\templateActiveDeadlineSeconds -> Template { templateActiveDeadlineSeconds, ..} ) <$> f templateActiveDeadlineSeconds
{-# INLINE templateActiveDeadlineSecondsL #-}

-- | 'templateAffinity' Lens
templateAffinityL :: Lens_' Template (Maybe V1Affinity)
templateAffinityL f Template{..} = (\templateAffinity -> Template { templateAffinity, ..} ) <$> f templateAffinity
{-# INLINE templateAffinityL #-}

-- | 'templateArchiveLocation' Lens
templateArchiveLocationL :: Lens_' Template (Maybe ArtifactLocation)
templateArchiveLocationL f Template{..} = (\templateArchiveLocation -> Template { templateArchiveLocation, ..} ) <$> f templateArchiveLocation
{-# INLINE templateArchiveLocationL #-}

-- | 'templateContainer' Lens
templateContainerL :: Lens_' Template (Maybe V1Container)
templateContainerL f Template{..} = (\templateContainer -> Template { templateContainer, ..} ) <$> f templateContainer
{-# INLINE templateContainerL #-}

-- | 'templateDaemon' Lens
templateDaemonL :: Lens_' Template (Maybe Bool)
templateDaemonL f Template{..} = (\templateDaemon -> Template { templateDaemon, ..} ) <$> f templateDaemon
{-# INLINE templateDaemonL #-}

-- | 'templateDag' Lens
templateDagL :: Lens_' Template (Maybe DAGTemplate)
templateDagL f Template{..} = (\templateDag -> Template { templateDag, ..} ) <$> f templateDag
{-# INLINE templateDagL #-}

-- | 'templateInputs' Lens
templateInputsL :: Lens_' Template (Maybe Inputs)
templateInputsL f Template{..} = (\templateInputs -> Template { templateInputs, ..} ) <$> f templateInputs
{-# INLINE templateInputsL #-}

-- | 'templateMetadata' Lens
templateMetadataL :: Lens_' Template (Maybe Metadata)
templateMetadataL f Template{..} = (\templateMetadata -> Template { templateMetadata, ..} ) <$> f templateMetadata
{-# INLINE templateMetadataL #-}

-- | 'templateName' Lens
templateNameL :: Lens_' Template (Text)
templateNameL f Template{..} = (\templateName -> Template { templateName, ..} ) <$> f templateName
{-# INLINE templateNameL #-}

-- | 'templateNodeSelector' Lens
templateNodeSelectorL :: Lens_' Template (Maybe (Map.Map String Text))
templateNodeSelectorL f Template{..} = (\templateNodeSelector -> Template { templateNodeSelector, ..} ) <$> f templateNodeSelector
{-# INLINE templateNodeSelectorL #-}

-- | 'templateOutputs' Lens
templateOutputsL :: Lens_' Template (Maybe Outputs)
templateOutputsL f Template{..} = (\templateOutputs -> Template { templateOutputs, ..} ) <$> f templateOutputs
{-# INLINE templateOutputsL #-}

-- | 'templateParallelism' Lens
templateParallelismL :: Lens_' Template (Maybe Integer)
templateParallelismL f Template{..} = (\templateParallelism -> Template { templateParallelism, ..} ) <$> f templateParallelism
{-# INLINE templateParallelismL #-}

-- | 'templateResource' Lens
templateResourceL :: Lens_' Template (Maybe ResourceTemplate)
templateResourceL f Template{..} = (\templateResource -> Template { templateResource, ..} ) <$> f templateResource
{-# INLINE templateResourceL #-}

-- | 'templateRetryStrategy' Lens
templateRetryStrategyL :: Lens_' Template (Maybe RetryStrategy)
templateRetryStrategyL f Template{..} = (\templateRetryStrategy -> Template { templateRetryStrategy, ..} ) <$> f templateRetryStrategy
{-# INLINE templateRetryStrategyL #-}

-- | 'templateScript' Lens
templateScriptL :: Lens_' Template (Maybe ScriptTemplate)
templateScriptL f Template{..} = (\templateScript -> Template { templateScript, ..} ) <$> f templateScript
{-# INLINE templateScriptL #-}

-- | 'templateSidecars' Lens
templateSidecarsL :: Lens_' Template (Maybe [Sidecar])
templateSidecarsL f Template{..} = (\templateSidecars -> Template { templateSidecars, ..} ) <$> f templateSidecars
{-# INLINE templateSidecarsL #-}

-- | 'templateSteps' Lens
templateStepsL :: Lens_' Template (Maybe [[WorkflowStep]])
templateStepsL f Template{..} = (\templateSteps -> Template { templateSteps, ..} ) <$> f templateSteps
{-# INLINE templateStepsL #-}

-- | 'templateSuspend' Lens
templateSuspendL :: Lens_' Template (Maybe SuspendTemplate)
templateSuspendL f Template{..} = (\templateSuspend -> Template { templateSuspend, ..} ) <$> f templateSuspend
{-# INLINE templateSuspendL #-}

-- | 'templateTolerations' Lens
templateTolerationsL :: Lens_' Template (Maybe [V1Toleration])
templateTolerationsL f Template{..} = (\templateTolerations -> Template { templateTolerations, ..} ) <$> f templateTolerations
{-# INLINE templateTolerationsL #-}



-- * ValueFrom

-- | 'valueFromJqFilter' Lens
valueFromJqFilterL :: Lens_' ValueFrom (Maybe Text)
valueFromJqFilterL f ValueFrom{..} = (\valueFromJqFilter -> ValueFrom { valueFromJqFilter, ..} ) <$> f valueFromJqFilter
{-# INLINE valueFromJqFilterL #-}

-- | 'valueFromJsonPath' Lens
valueFromJsonPathL :: Lens_' ValueFrom (Maybe Text)
valueFromJsonPathL f ValueFrom{..} = (\valueFromJsonPath -> ValueFrom { valueFromJsonPath, ..} ) <$> f valueFromJsonPath
{-# INLINE valueFromJsonPathL #-}

-- | 'valueFromParameter' Lens
valueFromParameterL :: Lens_' ValueFrom (Maybe Text)
valueFromParameterL f ValueFrom{..} = (\valueFromParameter -> ValueFrom { valueFromParameter, ..} ) <$> f valueFromParameter
{-# INLINE valueFromParameterL #-}

-- | 'valueFromPath' Lens
valueFromPathL :: Lens_' ValueFrom (Maybe Text)
valueFromPathL f ValueFrom{..} = (\valueFromPath -> ValueFrom { valueFromPath, ..} ) <$> f valueFromPath
{-# INLINE valueFromPathL #-}



-- * Workflow

-- | 'workflowApiVersion' Lens
workflowApiVersionL :: Lens_' Workflow (Maybe Text)
workflowApiVersionL f Workflow{..} = (\workflowApiVersion -> Workflow { workflowApiVersion, ..} ) <$> f workflowApiVersion
{-# INLINE workflowApiVersionL #-}

-- | 'workflowKind' Lens
workflowKindL :: Lens_' Workflow (Maybe Text)
workflowKindL f Workflow{..} = (\workflowKind -> Workflow { workflowKind, ..} ) <$> f workflowKind
{-# INLINE workflowKindL #-}

-- | 'workflowMetadata' Lens
workflowMetadataL :: Lens_' Workflow (V1ObjectMeta)
workflowMetadataL f Workflow{..} = (\workflowMetadata -> Workflow { workflowMetadata, ..} ) <$> f workflowMetadata
{-# INLINE workflowMetadataL #-}

-- | 'workflowSpec' Lens
workflowSpecL :: Lens_' Workflow (WorkflowSpec)
workflowSpecL f Workflow{..} = (\workflowSpec -> Workflow { workflowSpec, ..} ) <$> f workflowSpec
{-# INLINE workflowSpecL #-}

-- | 'workflowStatus' Lens
workflowStatusL :: Lens_' Workflow (Maybe WorkflowStatus)
workflowStatusL f Workflow{..} = (\workflowStatus -> Workflow { workflowStatus, ..} ) <$> f workflowStatus
{-# INLINE workflowStatusL #-}



-- * WorkflowList

-- | 'workflowListApiVersion' Lens
workflowListApiVersionL :: Lens_' WorkflowList (Maybe Text)
workflowListApiVersionL f WorkflowList{..} = (\workflowListApiVersion -> WorkflowList { workflowListApiVersion, ..} ) <$> f workflowListApiVersion
{-# INLINE workflowListApiVersionL #-}

-- | 'workflowListItems' Lens
workflowListItemsL :: Lens_' WorkflowList ([Workflow])
workflowListItemsL f WorkflowList{..} = (\workflowListItems -> WorkflowList { workflowListItems, ..} ) <$> f workflowListItems
{-# INLINE workflowListItemsL #-}

-- | 'workflowListKind' Lens
workflowListKindL :: Lens_' WorkflowList (Maybe Text)
workflowListKindL f WorkflowList{..} = (\workflowListKind -> WorkflowList { workflowListKind, ..} ) <$> f workflowListKind
{-# INLINE workflowListKindL #-}

-- | 'workflowListMetadata' Lens
workflowListMetadataL :: Lens_' WorkflowList (V1ListMeta)
workflowListMetadataL f WorkflowList{..} = (\workflowListMetadata -> WorkflowList { workflowListMetadata, ..} ) <$> f workflowListMetadata
{-# INLINE workflowListMetadataL #-}



-- * WorkflowSpec

-- | 'workflowSpecAffinity' Lens
workflowSpecAffinityL :: Lens_' WorkflowSpec (Maybe V1Affinity)
workflowSpecAffinityL f WorkflowSpec{..} = (\workflowSpecAffinity -> WorkflowSpec { workflowSpecAffinity, ..} ) <$> f workflowSpecAffinity
{-# INLINE workflowSpecAffinityL #-}

-- | 'workflowSpecArguments' Lens
workflowSpecArgumentsL :: Lens_' WorkflowSpec (Maybe Arguments)
workflowSpecArgumentsL f WorkflowSpec{..} = (\workflowSpecArguments -> WorkflowSpec { workflowSpecArguments, ..} ) <$> f workflowSpecArguments
{-# INLINE workflowSpecArgumentsL #-}

-- | 'workflowSpecEntrypoint' Lens
workflowSpecEntrypointL :: Lens_' WorkflowSpec (Text)
workflowSpecEntrypointL f WorkflowSpec{..} = (\workflowSpecEntrypoint -> WorkflowSpec { workflowSpecEntrypoint, ..} ) <$> f workflowSpecEntrypoint
{-# INLINE workflowSpecEntrypointL #-}

-- | 'workflowSpecImagePullSecrets' Lens
workflowSpecImagePullSecretsL :: Lens_' WorkflowSpec (Maybe [V1LocalObjectReference])
workflowSpecImagePullSecretsL f WorkflowSpec{..} = (\workflowSpecImagePullSecrets -> WorkflowSpec { workflowSpecImagePullSecrets, ..} ) <$> f workflowSpecImagePullSecrets
{-# INLINE workflowSpecImagePullSecretsL #-}

-- | 'workflowSpecNodeSelector' Lens
workflowSpecNodeSelectorL :: Lens_' WorkflowSpec (Maybe (Map.Map String Text))
workflowSpecNodeSelectorL f WorkflowSpec{..} = (\workflowSpecNodeSelector -> WorkflowSpec { workflowSpecNodeSelector, ..} ) <$> f workflowSpecNodeSelector
{-# INLINE workflowSpecNodeSelectorL #-}

-- | 'workflowSpecOnExit' Lens
workflowSpecOnExitL :: Lens_' WorkflowSpec (Maybe Text)
workflowSpecOnExitL f WorkflowSpec{..} = (\workflowSpecOnExit -> WorkflowSpec { workflowSpecOnExit, ..} ) <$> f workflowSpecOnExit
{-# INLINE workflowSpecOnExitL #-}

-- | 'workflowSpecParallelism' Lens
workflowSpecParallelismL :: Lens_' WorkflowSpec (Maybe Integer)
workflowSpecParallelismL f WorkflowSpec{..} = (\workflowSpecParallelism -> WorkflowSpec { workflowSpecParallelism, ..} ) <$> f workflowSpecParallelism
{-# INLINE workflowSpecParallelismL #-}

-- | 'workflowSpecServiceAccountName' Lens
workflowSpecServiceAccountNameL :: Lens_' WorkflowSpec (Maybe Text)
workflowSpecServiceAccountNameL f WorkflowSpec{..} = (\workflowSpecServiceAccountName -> WorkflowSpec { workflowSpecServiceAccountName, ..} ) <$> f workflowSpecServiceAccountName
{-# INLINE workflowSpecServiceAccountNameL #-}

-- | 'workflowSpecSuspend' Lens
workflowSpecSuspendL :: Lens_' WorkflowSpec (Maybe Bool)
workflowSpecSuspendL f WorkflowSpec{..} = (\workflowSpecSuspend -> WorkflowSpec { workflowSpecSuspend, ..} ) <$> f workflowSpecSuspend
{-# INLINE workflowSpecSuspendL #-}

-- | 'workflowSpecTemplates' Lens
workflowSpecTemplatesL :: Lens_' WorkflowSpec ([Template])
workflowSpecTemplatesL f WorkflowSpec{..} = (\workflowSpecTemplates -> WorkflowSpec { workflowSpecTemplates, ..} ) <$> f workflowSpecTemplates
{-# INLINE workflowSpecTemplatesL #-}

-- | 'workflowSpecTolerations' Lens
workflowSpecTolerationsL :: Lens_' WorkflowSpec (Maybe [V1Toleration])
workflowSpecTolerationsL f WorkflowSpec{..} = (\workflowSpecTolerations -> WorkflowSpec { workflowSpecTolerations, ..} ) <$> f workflowSpecTolerations
{-# INLINE workflowSpecTolerationsL #-}

-- | 'workflowSpecVolumeClaimTemplates' Lens
workflowSpecVolumeClaimTemplatesL :: Lens_' WorkflowSpec (Maybe [V1PersistentVolumeClaim])
workflowSpecVolumeClaimTemplatesL f WorkflowSpec{..} = (\workflowSpecVolumeClaimTemplates -> WorkflowSpec { workflowSpecVolumeClaimTemplates, ..} ) <$> f workflowSpecVolumeClaimTemplates
{-# INLINE workflowSpecVolumeClaimTemplatesL #-}

-- | 'workflowSpecVolumes' Lens
workflowSpecVolumesL :: Lens_' WorkflowSpec (Maybe [V1Volume])
workflowSpecVolumesL f WorkflowSpec{..} = (\workflowSpecVolumes -> WorkflowSpec { workflowSpecVolumes, ..} ) <$> f workflowSpecVolumes
{-# INLINE workflowSpecVolumesL #-}



-- * WorkflowStep

-- | 'workflowStepArguments' Lens
workflowStepArgumentsL :: Lens_' WorkflowStep (Maybe Arguments)
workflowStepArgumentsL f WorkflowStep{..} = (\workflowStepArguments -> WorkflowStep { workflowStepArguments, ..} ) <$> f workflowStepArguments
{-# INLINE workflowStepArgumentsL #-}

-- | 'workflowStepName' Lens
workflowStepNameL :: Lens_' WorkflowStep (Maybe Text)
workflowStepNameL f WorkflowStep{..} = (\workflowStepName -> WorkflowStep { workflowStepName, ..} ) <$> f workflowStepName
{-# INLINE workflowStepNameL #-}

-- | 'workflowStepTemplate' Lens
workflowStepTemplateL :: Lens_' WorkflowStep (Maybe Text)
workflowStepTemplateL f WorkflowStep{..} = (\workflowStepTemplate -> WorkflowStep { workflowStepTemplate, ..} ) <$> f workflowStepTemplate
{-# INLINE workflowStepTemplateL #-}

-- | 'workflowStepWhen' Lens
workflowStepWhenL :: Lens_' WorkflowStep (Maybe Text)
workflowStepWhenL f WorkflowStep{..} = (\workflowStepWhen -> WorkflowStep { workflowStepWhen, ..} ) <$> f workflowStepWhen
{-# INLINE workflowStepWhenL #-}

-- | 'workflowStepWithItems' Lens
workflowStepWithItemsL :: Lens_' WorkflowStep (Maybe [Item])
workflowStepWithItemsL f WorkflowStep{..} = (\workflowStepWithItems -> WorkflowStep { workflowStepWithItems, ..} ) <$> f workflowStepWithItems
{-# INLINE workflowStepWithItemsL #-}

-- | 'workflowStepWithParam' Lens
workflowStepWithParamL :: Lens_' WorkflowStep (Maybe Text)
workflowStepWithParamL f WorkflowStep{..} = (\workflowStepWithParam -> WorkflowStep { workflowStepWithParam, ..} ) <$> f workflowStepWithParam
{-# INLINE workflowStepWithParamL #-}


